"""
Django settings for watch project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path, PosixPath

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from typing import Dict, List, Any

import dotenv

BASE_DIR: str = Path(__file__).resolve().parent.parent.parent

ENV_FILE_NAME: str = os.environ.get("ENV_FILE", ".env")

assert (BASE_DIR / ENV_FILE_NAME).is_file() is True
DOTENV: str = str(BASE_DIR / ENV_FILE_NAME)
dotenv.load_dotenv(DOTENV)

if os.environ["SECRET_KEY"] in {"", None}:
    import random

    secret = "".join(
        [
            random.SystemRandom().choice(
                "abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)"
            )
            for i in range(50)
        ]
    )
    dotenv.set_key(DOTENV, "SECRET_KEY", secret)
    os.environ["SECRET_KEY"] = secret

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: str = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG: bool = False

ALLOWED_HOSTS: List[str] = os.environ.get("ALLOWED_URLS", "").split(",")
CSRF_TRUSTED_ORIGINS: List[str] = [f"https://{domain}:8000" for domain in os.environ.get("ALLOWED_URLS", "").split(",")]

ALLOW_HTTP: bool = os.environ.get("ALLOW_HTTP", "false") in {
    "true",
    "True",
    "1",
}


if ALLOW_HTTP:
    CSRF_TRUSTED_ORIGINS.extend([f"http://{domain}:8000" for domain in os.environ.get("ALLOWED_URLS", "").split(",")])


# Application definition

INSTALLED_APPS: List[str] = [
    "panel.apps.PanelConfig",
    "stream.apps.StreamConfig",
    "rest_framework",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "lazysignup",
]

REST_FRAMEWORK: Dict[str, Any] = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    # ]
}

MIDDLEWARE: List[str] = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF: str = "watch.urls"

TEMPLATES: List[Dict[str, Any]] = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "frontend/src"),
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION: str = "watch.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES: Dict[str, Dict[str, str]] = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


AUTHENTICATION_BACKENDS: List[str] = [
    "django.contrib.auth.backends.ModelBackend",
    "lazysignup.backends.LazySignupBackend",
]

AUTH_PASSWORD_VALIDATORS: List[Dict[str, str]] = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE: str = "en-us"

TIME_ZONE: str = "UTC"

USE_I18N: bool = True

USE_L10N: bool = True

USE_TZ: bool = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL: str = "/static/"
STATIC_ROOT: str = str(BASE_DIR / "statics")

STATICFILES_DIRS: List[str] = [
    os.path.join(BASE_DIR, "frontend/dist"),
    os.path.join(BASE_DIR, "templates/statics"),
]
LOGIN_REDIRECT_URL: str = "/"

CELERY_BROKER_URL: str = os.environ.get("CELERY_BROKER_URL", None)
CELERY_RESULT_BACKEND: str = os.environ.get("CELERY_RESULT_BACKEND", None)
CELERY_ACCEPT_CONTENT: List[str] = ["application/json"]
CELERY_RESULT_SERIALIZER: str = "json"
CELERY_TASK_SERIALIZER: str = "json"
# BROKER_POOL_LIMIT = None
MOVIEDB_API: str = os.environ["MOVIEDB_API"]

LOGGING: Dict[str, Any] = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

SHELL_PLUS: str = "ipython"
SHELL_PLUS_IMPORTS: List[str] = [
    "from pathlib import Path",
    "from panel.tasks import torrent, subtitles",
]
SRT_VTT: PosixPath = BASE_DIR / "srt_to_vtt" / "srt-vtt"
QBITTORRENT_URL: str = os.environ.get("QBITTORRENT_URL", None)
MEDIA_FOLDER: str = os.environ.get("MEDIA_FOLDER", "")  # Has to end with /
SUBTITLE_LANGS: str = os.environ.get("SUBTITLE_LANGS", "eng")
DELETE_ORIGINAL_FILES: bool = os.environ.get("DELETE_ORIGINAL_FILES", "false") in {
    "true",
    "True",
    "1",
}
DEMO: bool = os.environ.get("DEMO", "false") in {
    "true",
    "True",
    "1",
}

DEFAULT_AUTO_FIELD: str = "django.db.models.BigAutoField"
